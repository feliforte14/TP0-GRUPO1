
import random

# Definimos los emojis para el juego
emojis = {
    "vacio": "â¬œ",
    "bueno": "ðŸ¤ ",
    "malo": "ðŸ‘¹",
    "salida": "ðŸšª",
    "pared": "ðŸš§"
}

# FunciÃ³n para crear el tablero bÃ¡sico

def hacerTablero(tamaÃ±o, emojis):

    """Crea el tablero y coloca al jugador, enemigo, y la salida."""
    tablero = [[emojis["vacio"]]*tamaÃ±o for i in range(tamaÃ±o)]
    
    # Posicionamos al jugador, enemigo y salida de forma aleatoria

    pos_bueno = random.randint(0, tamaÃ±o - 1)
    pos_malo = random.randint(0, tamaÃ±o - 1)
    pos_exit = random.randint(0, tamaÃ±o - 1)
    
    # Asegurarnos de que no colisionen al inicio
    while pos_exit == pos_malo:
        pos_exit = random.randint(0, tamaÃ±o - 1)
    
    tablero[pos_bueno][0] = emojis["bueno"]
    tablero[pos_malo][0] = emojis["malo"]
    tablero[pos_exit][-1] = emojis["salida"]
    
    # Colocamos algunos obstÃ¡culos
    poner_paredes(tablero, emojis["pared"])
    
    return tablero, (pos_bueno, 0), (pos_malo, 0), (pos_exit, tamaÃ±o - 1)

# FunciÃ³n para colocar paredes en el tablero
def poner_paredes(tablero, emoji):
    """Coloca obstÃ¡culos aleatoriamente en el tablero."""
    for _ in range(10):
        f = random.randint(0, len(tablero) - 1)
        c = random.randint(0, len(tablero) - 1)
        tablero[f][c] = emoji

# FunciÃ³n para mostrar el tablero

def mostrarTablero(tablero):
    for fila in tablero:
        print(" ".join(fila))

# Movimiento del jugador

def mover_jugador(tablero, pos_bueno, direccion, tamaÃ±o):
    f, c = pos_bueno
    tablero[f][c] = emojis["vacio"]
    
    if direccion == 'w' and f > 0:
        f -= 1
    elif direccion == 's' and f < tamaÃ±o - 1:
        f += 1
    elif direccion == 'a' and c > 0:
        c -= 1
    elif direccion == 'd' and c < tamaÃ±o - 1:
        c += 1
    
    if tablero[f][c] == emojis["pared"]:
        return pos_bueno  # No permite moverse si hay una pared

    tablero[f][c] = emojis["bueno"]
    return (f, c)

# FunciÃ³n para verificar si el jugador ganÃ³ o perdiÃ³

def verificar_estado(pos_bueno, pos_malo, pos_exit, vidas):
    if pos_bueno == pos_malo:
        vidas -= 1
        print("Â¡Has perdido una vida!")
    if vidas == 0:
        print("Â¡Juego terminado! Has perdido todas tus vidas.")
        return False, vidas
    if pos_bueno == pos_exit:
        print("Â¡Has ganado!")
        return False, vidas
    return True, vidas

# FunciÃ³n principal para controlar el juego

def jugar():
    tamaÃ±o = 5
    tablero, pos_bueno, pos_malo, pos_exit = hacerTablero(tamaÃ±o, emojis)
    vidas = 3
    jugando = True
    
    while jugando:
        mostrarTablero(tablero)
        print(f"Vidas restantes: {vidas}")
        
        movimiento = input("Mover (W, A, S, D): ").lower()
        if movimiento in ['w', 'a', 's', 'd']:
            pos_bueno = mover_jugador(tablero, pos_bueno, movimiento, tamaÃ±o)
            jugando, vidas = verificar_estado(pos_bueno, pos_malo, pos_exit, vidas)
        else:
            print("Movimiento invÃ¡lido.")

# Comentar la llamada al juego para evitar la ejecuciÃ³n automÃ¡tica
# jugar()


def main():

    jugar()

if __name__== "__main__":
    main()